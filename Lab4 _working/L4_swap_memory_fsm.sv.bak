//===================********TASK 1********======================
//  THIS MODULE INCREMENTS COUNT AND ASSIGNS COUNT TO ADDRESS AND DATA
//  AND ENABLES WRITE TO RAM. BASIC GLITCH FREE STATE MACHINE. 
//  COMPLETES 1 ITERATION IN 3 CYCLES, AND INCREMENTS COUNTER EVERY 3 CYCLES.
//  IDLES WHEN COUNT IS 255.
//===========================================================

module swap_fsm(
input clock,
output [7:0] address,
output [7:0] data,
output finish,
output write_enable
);
 
parameter s_wait 			= 3'b000;
parameter write 			= 3'b001;
parameter s_increment	= 3'b010;
parameter finish_init	= 3'b100;


logic increment;
reg [2:0] state = 0;
reg [7:0] count = 0;

assign data = count;
assign address = count;

assign write_enable = state[0];
assign increment = state[1];
assign finish = state [2];

always_ff @(posedge clock) begin
	case(state)
		s_wait:				state <= write;
		
		write:			state <= s_increment;
		
		s_increment:		if (count == 255) 
								state <= finish_init;
							else 					
								state <= s_wait;
								
		finish_init:	state <= finish_init;
		
		default: 		state <= s_wait;

	endcase
end

always_ff @(posedge clock) begin
	if(increment) 
		count <= count + 1;
	else 
		count <= count;
end

endmodule