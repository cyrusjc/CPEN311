`default_nettype none
module simple_ipod_solution(
    //////////// CLOCK //////////
    CLOCK_50,
	 TD_CLK27,
    //////////// LED //////////
    LEDR,
    //////////// KEY //////////
    KEY,
    //////////// SW //////////
    SW,
    //////////// SEG7 //////////
    HEX0,
    HEX1,
    HEX2,
    HEX3,
    HEX4,
    HEX5,
    //////////// Audio //////////
    AUD_ADCDAT,
    AUD_ADCLRCK,
    AUD_BCLK,
    AUD_DACDAT, 
    AUD_DACLRCK,
    AUD_XCK,
    //////////// I2C for Audio  //////////
    FPGA_I2C_SCLK,
    FPGA_I2C_SDAT,
    //////// PS2 //////////
    PS2_CLK,
    PS2_DAT,
    //////// SDRAM //////////
    DRAM_ADDR,
    DRAM_BA,
    DRAM_CAS_N,
    DRAM_CKE,
    DRAM_CLK,
    DRAM_CS_N,
    DRAM_DQ,
    DRAM_LDQM,
    DRAM_UDQM,
    DRAM_RAS_N,
    DRAM_WE_N,
    //////// GPIO //////////
    GPIO_0,
    GPIO_1  
);
//////////// CLOCK //////////
input                       CLOCK_50;
input 							 TD_CLK27;
//////////// LED //////////
output           [9:0]      LEDR;
//////////// KEY //////////
input            [3:0]      KEY;
//////////// SW //////////
input            [9:0]      SW;
//////////// SEG7 //////////
output           [6:0]      HEX0;
output           [6:0]      HEX1;
output           [6:0]      HEX2;
output           [6:0]      HEX3;
output           [6:0]      HEX4;
output           [6:0]      HEX5;
//////////// Audio //////////
input                       AUD_ADCDAT;
inout                       AUD_ADCLRCK;
inout                       AUD_BCLK;
output                      AUD_DACDAT;
inout                       AUD_DACLRCK;
output                      AUD_XCK;
//////////// I2C for Audio  //////////
output                      FPGA_I2C_SCLK;
inout                       FPGA_I2C_SDAT;
//////////// PS2 //////////
inout                       PS2_CLK;
inout                       PS2_DAT;
//////////// GPIO //////////
inout           [35:0]      GPIO_0;
inout           [35:0]      GPIO_1;            
//////////// SDRAM //////////
output          [12:0]      DRAM_ADDR;
output        [1:0]         DRAM_BA;
output                      DRAM_CAS_N;
output                      DRAM_CKE;
output                      DRAM_CLK;
output                      DRAM_CS_N;
inout           [15:0]      DRAM_DQ;
output                      DRAM_LDQM;
output                      DRAM_UDQM;
output                      DRAM_RAS_N;
output                      DRAM_WE_N;
//=======================================================
//  REG/WIRE declarations
//=======================================================
// Input and output declarations
logic CLK_50M;
logic  [9:0] LED;
assign CLK_50M =  CLOCK_50;
assign LEDR[9:0] = LED[9:0];

logic reset_n;
logic [6:0] ssOut;
logic [3:0] nIn;

SevenSegmentDisplayDecoder mod(.nIn(nIn), .ssOut(ssOut));


endmodule
