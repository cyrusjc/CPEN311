      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; KCPSM3 Program - Practice Picoblaze on Spartan-3A Starter Kit.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; The 8 LEDs provide a simple 'heart beat' counter driven by interrupts generated at
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; one second intervals.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Port definitions
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-LED_0
   OPERAND2-40
    COMMENT-;OUTPUT DATA PORT FOR SINGLE BLINKING LED
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-LED_PORT
   OPERAND2-80
    COMMENT-;8 simple LEDs. Is an OUTPUT port.
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-AUDIO_1
   OPERAND2-00
    COMMENT-;input data port. this is an INPUT port.
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-AUDIO_2
   OPERAND2-01
    COMMENT-;input data port. this is an INPUT port.
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-AUDIO_3
   OPERAND2-02
    COMMENT-;input data port. this is an INPUT port.
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-AUDIO_4
   OPERAND2-04
    COMMENT-;input data port. this is an INPUT port.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Special Register usage
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; No registers are given special names in this program.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Scratch Pad Memory Locations
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-ISR_preserve_s0
   OPERAND2-00
    COMMENT-;Preserve s0 contents during ISR
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-ISR_preserve_s1
   OPERAND2-01
    COMMENT-;Preserve s1 contents during ISR
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-ISR_preserve_s2
   OPERAND2-02
    COMMENT-;Preserve s2 contents during ISR
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-ISR_preserve_s3
   OPERAND2-03
    COMMENT-;Preserve s3 contents during ISR
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-ISR_preserve_s4
   OPERAND2-04
    COMMENT-;Preserve s3 contents during ISR
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-SUM
   OPERAND2-04
    COMMENT-;SUM OF THE ADDRESSES
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-COUNT
   OPERAND2-06
    COMMENT-;COUNT UP TO 255
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-SUM_CARRY
   OPERAND2-07
    COMMENT-;CARRY OF SUM USED TO OUTPUT LED
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Useful data constants
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Constant to define a software delay of 1us. This must be adjusted to reflect the
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; clock applied to KCPSM3. Every instruction executes in 2 clock cycles making the
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; calculation highly predictable. The '6' in the following equation even allows for
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; 'CALL delay_1us' instruction in the initiating code.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; delay_1us_constant =  (clock_rate - 6)/4       Where 'clock_rate' is in MHz
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Example: For a 50MHz clock the constant value is (10-6)/4 = 11  (0B Hex).
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; For clock rates below 10MHz the value of 1 must be used and the operation will
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; become lower than intended. Interrupts may effect the timing of software based
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; delays.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-delay_1us_constant
   OPERAND2-0B
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; ASCII table
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_a
   OPERAND2-61
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_b
   OPERAND2-62
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_c
   OPERAND2-63
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_d
   OPERAND2-64
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_e
   OPERAND2-65
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_f
   OPERAND2-66
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_g
   OPERAND2-67
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_h
   OPERAND2-68
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_i
   OPERAND2-69
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_j
   OPERAND2-6A
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_k
   OPERAND2-6B
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_l
   OPERAND2-6C
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_m
   OPERAND2-6D
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_n
   OPERAND2-6E
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_o
   OPERAND2-6F
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_p
   OPERAND2-70
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_q
   OPERAND2-71
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_r
   OPERAND2-72
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_s
   OPERAND2-73
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_t
   OPERAND2-74
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_u
   OPERAND2-75
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_v
   OPERAND2-76
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_w
   OPERAND2-77
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_x
   OPERAND2-78
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_y
   OPERAND2-79
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_z
   OPERAND2-7A
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_A
   OPERAND2-41
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_B
   OPERAND2-42
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_C
   OPERAND2-43
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_D
   OPERAND2-44
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_E
   OPERAND2-45
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_F
   OPERAND2-46
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_G
   OPERAND2-47
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_H
   OPERAND2-48
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_I
   OPERAND2-49
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_J
   OPERAND2-4A
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_K
   OPERAND2-4B
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_L
   OPERAND2-4C
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_M
   OPERAND2-4D
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_N
   OPERAND2-4E
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_O
   OPERAND2-4F
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_P
   OPERAND2-50
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_Q
   OPERAND2-51
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_R
   OPERAND2-52
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_S
   OPERAND2-53
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_T
   OPERAND2-54
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_U
   OPERAND2-55
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_V
   OPERAND2-56
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_W
   OPERAND2-57
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_X
   OPERAND2-58
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_Y
   OPERAND2-59
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_Z
   OPERAND2-5A
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_0
   OPERAND2-30
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_1
   OPERAND2-31
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_2
   OPERAND2-32
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_3
   OPERAND2-33
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_4
   OPERAND2-34
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_5
   OPERAND2-35
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_6
   OPERAND2-36
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_7
   OPERAND2-37
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_8
   OPERAND2-38
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_9
   OPERAND2-39
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_colon
   OPERAND2-3A
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_stop
   OPERAND2-2E
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_semi_colon
   OPERAND2-3B
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_minus
   OPERAND2-2D
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_divide
   OPERAND2-2F
    COMMENT-;'/'
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_plus
   OPERAND2-2B
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_comma
   OPERAND2-2C
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_less_than
   OPERAND2-3C
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_greater_than
   OPERAND2-3E
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_equals
   OPERAND2-3D
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_space
   OPERAND2-20
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_CR
   OPERAND2-0D
    COMMENT-;carriage return
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_question
   OPERAND2-3F
    COMMENT-;'?'
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_dollar
   OPERAND2-24
    COMMENT-
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_exclaim
   OPERAND2-21
    COMMENT-;'!'
      LABEL-
INSTRUCTION-CONSTANT
   OPERAND1-character_BS
   OPERAND2-08
    COMMENT-;Back Space command character
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Initialise the system
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-cold_start
INSTRUCTION-LOAD
   OPERAND1-s0
   OPERAND2-00
    COMMENT-;CLEAR ALL
      LABEL-
INSTRUCTION-STORE
   OPERAND1-s0
   OPERAND2-SUM
    COMMENT-
      LABEL-
INSTRUCTION-STORE
   OPERAND1-s0
   OPERAND2-COUNT
    COMMENT-
      LABEL-
INSTRUCTION-STORE
   OPERAND1-s0
   OPERAND2-SUM_CARRY
    COMMENT-
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-s0
   OPERAND2-LED_PORT
    COMMENT-
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-s0
   OPERAND2-LED_0
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-ENABLE
   OPERAND1-INTERRUPT
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Main program
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Display welcome message for design
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-main_program
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s1
   OPERAND2-01
    COMMENT-
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-s1
   OPERAND2-LED_0
    COMMENT-; PUTS 1 INTO LED_0 (TURNS ON LED)
      LABEL-
INSTRUCTION-CALL
   OPERAND1-delay_1s
   OPERAND2-
    COMMENT-;WAITS 1 SECOND TO TURN OFF
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s1
   OPERAND2-00
    COMMENT-
      LABEL-
INSTRUCTION-OUTPUT
   OPERAND1-s1
   OPERAND2-LED_0
    COMMENT-; PUTS 0 INTO LED_0, (TURNS OFF LED)
      LABEL-
INSTRUCTION-CALL
   OPERAND1-delay_1s
   OPERAND2-
    COMMENT-;WAITS ANOTEHR SECOND TO TURN ON
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-main_program
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Software delay routines
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Delay of 1us.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Constant value 'delay_1us_constant' reflects the clock applied to KCPSM3. Every
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; instruction executes in 2 clock cycles making the calculation highly predictable.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; The '6' in the following equation allows for the 'CALL delay_1us' instruction used
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; in the initiating code. Interrupts may effect software derived delays.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; delay_1us_constant =  (clock_rate - 6)/4       Where 'clock_rate' is in MHz
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Registers used s0
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-delay_1us
INSTRUCTION-LOAD
   OPERAND1-s0
   OPERAND2-delay_1us_constant
    COMMENT-
      LABEL-wait_1us
INSTRUCTION-SUB
   OPERAND1-s0
   OPERAND2-01
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-NZ
   OPERAND2-wait_1us
    COMMENT-
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Delay of 40us.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Registers used s0, s1
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-delay_40us
INSTRUCTION-LOAD
   OPERAND1-s1
   OPERAND2-28
    COMMENT-;40 x 1us = 40us
      LABEL-wait_40us
INSTRUCTION-CALL
   OPERAND1-delay_1us
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-SUB
   OPERAND1-s1
   OPERAND2-01
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-NZ
   OPERAND2-wait_40us
    COMMENT-
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Delay of 1ms.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Registers used s0, s1, s2
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-delay_1ms
INSTRUCTION-LOAD
   OPERAND1-s2
   OPERAND2-19
    COMMENT-;25 x 40us = 1ms
      LABEL-wait_1ms
INSTRUCTION-CALL
   OPERAND1-delay_40us
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-SUB
   OPERAND1-s2
   OPERAND2-01
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-NZ
   OPERAND2-wait_1ms
    COMMENT-
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Delay of 20ms.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Delay of 20ms used during initialisation.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Registers used s0, s1, s2, s3
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-delay_20ms
INSTRUCTION-LOAD
   OPERAND1-s3
   OPERAND2-14
    COMMENT-;20 x 1ms = 20ms
      LABEL-wait_20ms
INSTRUCTION-CALL
   OPERAND1-delay_1ms
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-SUB
   OPERAND1-s3
   OPERAND2-01
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-NZ
   OPERAND2-wait_20ms
    COMMENT-
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Delay of approximately 1 second.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Registers used s0, s1, s2, s3, s4
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-delay_1s
INSTRUCTION-LOAD
   OPERAND1-s4
   OPERAND2-32
    COMMENT-;50 x 20ms = 1000ms
      LABEL-wait_1s
INSTRUCTION-CALL
   OPERAND1-delay_20ms
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-SUB
   OPERAND1-s4
   OPERAND2-01
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-NZ
   OPERAND2-wait_1s
    COMMENT-
      LABEL-
INSTRUCTION-RETURN
   OPERAND1-
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Interrupt Service Routine (ISR)
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; The interrupt is used purely to provide a 1 second heart beat binary counter pattern
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; on the 8 LEDs.
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-ISR
INSTRUCTION-STORE
   OPERAND1-s1
   OPERAND2-ISR_preserve_s0
    COMMENT-;preserve register
      LABEL-
INSTRUCTION-STORE
   OPERAND1-s2
   OPERAND2-ISR_preserve_s1
    COMMENT-
      LABEL-
INSTRUCTION-STORE
   OPERAND1-s3
   OPERAND2-ISR_preserve_s2
    COMMENT-
      LABEL-
INSTRUCTION-FETCH
   OPERAND1-s1
   OPERAND2-SUM
    COMMENT-;read current sum value
      LABEL-
INSTRUCTION-FETCH
   OPERAND1-s2
   OPERAND2-SUM_CARRY
    COMMENT-;read carryout of the sums
      LABEL-
INSTRUCTION-FETCH
   OPERAND1-s3
   OPERAND2-COUNT
    COMMENT-;reads count
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;;===================== ADD FIRST BYTE ================================
      LABEL-
INSTRUCTION-INPUT
   OPERAND1-s5
   OPERAND2-AUDIO_1
    COMMENT-;INPUT INTO 1st BYTE
      LABEL-
INSTRUCTION-COMPARE
   OPERAND1-s5
   OPERAND2-80
    COMMENT-;COMPARES IT TO 1000_000 TO SEE IF ITS A NEGATIVE NUMBER
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-C
   OPERAND2-ADD_BYTE_1
    COMMENT-;jump if S2 < 80 (POSITIVE NUMBER)
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;; CONVERSION FROM 2's COMPLEMENT IF NEGATIVE
      LABEL-
INSTRUCTION-XOR
   OPERAND1-s5
   OPERAND2-ff
    COMMENT-
      LABEL-
INSTRUCTION-ADD
   OPERAND1-s5
   OPERAND2-01
    COMMENT-;CONVERTING 2's COMPLEMENT
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;; ADDS THIS TO SUM
      LABEL-ADD_BYTE_1
INSTRUCTION-ADD
   OPERAND1-s1
   OPERAND2-s5
    COMMENT-;ADD INPUT INTO REGISTER 1 (OUR SUM)
      LABEL-
INSTRUCTION-ADDCY
   OPERAND1-s2
   OPERAND2-00
    COMMENT-;ADD THE CARRYOUT TO OUR REGISTER 2
      LABEL-
INSTRUCTION-ADD
   OPERAND1-s3
   OPERAND2-01
    COMMENT-;INCREMENT COUNTER
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;;===================== ADD SECOND BYTE ================================
      LABEL-
INSTRUCTION-INPUT
   OPERAND1-s5
   OPERAND2-AUDIO_2
    COMMENT-;INPUT INTO 1st BYTE
      LABEL-
INSTRUCTION-COMPARE
   OPERAND1-s5
   OPERAND2-80
    COMMENT-;COMPARES IT TO 1000_000 TO SEE IF ITS A NEGATIVE NUMBER
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-C
   OPERAND2-ADD_BYTE_2
    COMMENT-;jump if S2 < 80 (POSITIVE NUMBER)
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;; CONVERSION FROM 2's COMPLEMENT IF NEGATIVE
      LABEL-
INSTRUCTION-XOR
   OPERAND1-s5
   OPERAND2-ff
    COMMENT-
      LABEL-
INSTRUCTION-ADD
   OPERAND1-s5
   OPERAND2-01
    COMMENT-;CONVERTING 2's COMPLEMENT
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;; ADDS THIS TO SUM
      LABEL-ADD_BYTE_2
INSTRUCTION-ADD
   OPERAND1-s1
   OPERAND2-s5
    COMMENT-;ADD INPUT INTO REGISTER 1 (OUR SUM)
      LABEL-
INSTRUCTION-ADDCY
   OPERAND1-s2
   OPERAND2-00
    COMMENT-;ADD THE CARRYOUT TO OUR REGISTER 2
      LABEL-
INSTRUCTION-ADD
   OPERAND1-s3
   OPERAND2-01
    COMMENT-;INCREMENT COUNTER
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;;===================== ADD THIRD BYTE ================================
      LABEL-
INSTRUCTION-INPUT
   OPERAND1-s5
   OPERAND2-AUDIO_3
    COMMENT-;INPUT INTO 1st BYTE
      LABEL-
INSTRUCTION-COMPARE
   OPERAND1-s5
   OPERAND2-80
    COMMENT-;COMPARES IT TO 1000_000 TO SEE IF ITS A NEGATIVE NUMBER
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-C
   OPERAND2-ADD_BYTE_3
    COMMENT-;jump if S2 < 80 (POSITIVE NUMBER)
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;; CONVERSION FROM 2's COMPLEMENT IF NEGATIVE
      LABEL-
INSTRUCTION-XOR
   OPERAND1-s5
   OPERAND2-ff
    COMMENT-
      LABEL-
INSTRUCTION-ADD
   OPERAND1-s5
   OPERAND2-01
    COMMENT-;CONVERTING 2's COMPLEMENT
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;; ADDS THIS TO SUM
      LABEL-ADD_BYTE_3
INSTRUCTION-ADD
   OPERAND1-s1
   OPERAND2-s5
    COMMENT-;ADD INPUT INTO REGISTER 1 (OUR SUM)
      LABEL-
INSTRUCTION-ADDCY
   OPERAND1-s2
   OPERAND2-00
    COMMENT-;ADD THE CARRYOUT TO OUR REGISTER 2
      LABEL-
INSTRUCTION-ADD
   OPERAND1-s3
   OPERAND2-01
    COMMENT-;INCREMENT COUNTER
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;;===================== ADD FOURTH BYTE ================================
      LABEL-
INSTRUCTION-INPUT
   OPERAND1-s5
   OPERAND2-AUDIO_4
    COMMENT-;INPUT INTO 1st BYTE
      LABEL-
INSTRUCTION-COMPARE
   OPERAND1-s5
   OPERAND2-80
    COMMENT-;COMPARES IT TO 1000_000 TO SEE IF ITS A NEGATIVE NUMBER
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-C
   OPERAND2-ADD_BYTE_4
    COMMENT-;jump if S2 < 80 (POSITIVE NUMBER)
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;; CONVERSION FROM 2's COMPLEMENT IF NEGATIVE
      LABEL-
INSTRUCTION-XOR
   OPERAND1-s5
   OPERAND2-ff
    COMMENT-
      LABEL-
INSTRUCTION-ADD
   OPERAND1-s5
   OPERAND2-01
    COMMENT-;CONVERTING 2's COMPLEMENT
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;; ADDS THIS TO SUM
      LABEL-ADD_BYTE_4
INSTRUCTION-ADD
   OPERAND1-s1
   OPERAND2-s5
    COMMENT-;ADD INPUT INTO REGISTER 1 (OUR SUM)
      LABEL-
INSTRUCTION-ADDCY
   OPERAND1-s2
   OPERAND2-00
    COMMENT-;ADD THE CARRYOUT TO OUR REGISTER 2
      LABEL-
INSTRUCTION-ADD
   OPERAND1-s3
   OPERAND2-01
    COMMENT-;INCREMENT COUNTER
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;;============================================================
      LABEL-
INSTRUCTION-COMPARE
   OPERAND1-s3
   OPERAND2-00
    COMMENT-;IF COUNTER IS NOT 0 (OVER FLOW OF 255+1)
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-NZ
   OPERAND2-return
    COMMENT-;END INSTRUCTIOn
      LABEL-
INSTRUCTION-COMPARE
   OPERAND1-s2
   OPERAND2-80
    COMMENT-;IS IT BIGGER THAN 1000_0000?
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-C
   OPERAND2-H40
    COMMENT-; IF ITS NOT JUMP TO H40 AND THEN COMPARE
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s2
   OPERAND2-ff
    COMMENT-; LOAD WITH 1111_1111
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-OUTPUT_LED
   OPERAND2-
    COMMENT-; OUTPUTS IT INTO LED
      LABEL-H40
INSTRUCTION-COMPARE
   OPERAND1-s2
   OPERAND2-40
    COMMENT-;IS IT BIGGER THAN 100_0000?
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-C
   OPERAND2-H20
    COMMENT-; IF ITS NOT JUMP TO H20 AND THEN COMPARE
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s2
   OPERAND2-fe
    COMMENT-; LOAD WITH 1111_1110
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-OUTPUT_LED
   OPERAND2-
    COMMENT-; OUTPUTS IT INTO LED
      LABEL-H20
INSTRUCTION-COMPARE
   OPERAND1-s2
   OPERAND2-20
    COMMENT-;IS IT BIGGER THAN 10_0000?
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-C
   OPERAND2-H10
    COMMENT-; IF ITS NOT JUMP TO H40 AND THEN COMPARE
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s2
   OPERAND2-fc
    COMMENT-; LOAD WITH 1111_1100
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-OUTPUT_LED
   OPERAND2-
    COMMENT-; OUTPUTS IT INTO LED
      LABEL-H10
INSTRUCTION-COMPARE
   OPERAND1-s2
   OPERAND2-10
    COMMENT-;IS IT BIGGER THAN 1_0000?
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-C
   OPERAND2-H08
    COMMENT-; IF ITS NOT JUMP TO H40 AND THEN COMPARE
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s2
   OPERAND2-f8
    COMMENT-; LOAD WITH 1111_1000
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-OUTPUT_LED
   OPERAND2-
    COMMENT-; OUTPUTS IT INTO LED
      LABEL-H08
INSTRUCTION-COMPARE
   OPERAND1-s2
   OPERAND2-08
    COMMENT-;IS IT BIGGER THAN 1000?
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-C
   OPERAND2-H04
    COMMENT-; IF ITS NOT JUMP TO H40 AND THEN COMPARE
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s2
   OPERAND2-f0
    COMMENT-; LOAD WITH 1111_0000
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-OUTPUT_LED
   OPERAND2-
    COMMENT-; OUTPUTS IT INTO LED
      LABEL-H04
INSTRUCTION-COMPARE
   OPERAND1-s2
   OPERAND2-04
    COMMENT-;IS IT BIGGER THAN 100?
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-C
   OPERAND2-H02
    COMMENT-; IF ITS NOT JUMP TO H40 AND THEN COMPARE
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s2
   OPERAND2-e0
    COMMENT-; LOAD WITH 1110_0000
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-OUTPUT_LED
   OPERAND2-
    COMMENT-; OUTPUTS IT INTO LED
      LABEL-H02
INSTRUCTION-COMPARE
   OPERAND1-s2
   OPERAND2-02
    COMMENT-;IS IT BIGGER THAN 10?
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-C
   OPERAND2-H01
    COMMENT-; IF ITS NOT JUMP TO H40 AND THEN COMPARE
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s2
   OPERAND2-c0
    COMMENT-; LOAD WITH 1100_0000
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-OUTPUT_LED
   OPERAND2-
    COMMENT-; OUTPUTS IT INTO LED
      LABEL-H01
INSTRUCTION-COMPARE
   OPERAND1-s2
   OPERAND2-01
    COMMENT-;IS IT BIGGER THAN 1?
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-C
   OPERAND2-H00
    COMMENT-; IF ITS NOT JUMP TO H40 AND THEN COMPARE
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s2
   OPERAND2-80
    COMMENT-; LOAD WITH 1000_0000
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-OUTPUT_LED
   OPERAND2-
    COMMENT-; OUTPUTS IT INTO LED
      LABEL-H00
INSTRUCTION-LOAD
   OPERAND1-s2
   OPERAND2-00
    COMMENT-; LOAD WITH 0
      LABEL-OUTPUT_LED
INSTRUCTION-OUTPUT
   OPERAND1-s2
   OPERAND2-LED_PORT
    COMMENT-;display counter value on LEDs
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s1
   OPERAND2-00
    COMMENT-;RESET SUM
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s2
   OPERAND2-00
    COMMENT-;RESET SUM_CARRY
      LABEL-
INSTRUCTION-LOAD
   OPERAND1-s3
   OPERAND2-00
    COMMENT-;RESET COUNTER
      LABEL-return
INSTRUCTION-STORE
   OPERAND1-s1
   OPERAND2-SUM
    COMMENT-;store new counter value
      LABEL-
INSTRUCTION-STORE
   OPERAND1-s2
   OPERAND2-SUM_CARRY
    COMMENT-
      LABEL-
INSTRUCTION-STORE
   OPERAND1-s3
   OPERAND2-COUNT
    COMMENT-;STORE COUNTER VALUE
      LABEL-
INSTRUCTION-FETCH
   OPERAND1-s1
   OPERAND2-ISR_preserve_s0
    COMMENT-;restore registers
      LABEL-
INSTRUCTION-FETCH
   OPERAND1-s2
   OPERAND2-ISR_preserve_s1
    COMMENT-
      LABEL-
INSTRUCTION-FETCH
   OPERAND1-s3
   OPERAND2-ISR_preserve_s2
    COMMENT-
      LABEL-
INSTRUCTION-RETURNI
   OPERAND1-ENABLE
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-; Interrupt Vector
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;**************************************************************************************
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-ADDRESS
   OPERAND1-3FF
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-JUMP
   OPERAND1-ISR
   OPERAND2-
    COMMENT-
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
      LABEL-
INSTRUCTION-
   OPERAND1-
   OPERAND2-
    COMMENT-;
