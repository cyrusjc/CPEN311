KCPSM3 Assembler log file for program 'pracpico.psm'.
Generated by KCPSM3 version 1.30
Ken Chapman (Xilinx Ltd) 2005.
24Feb2019-16:32:23

 Addr Code

 000                       ; KCPSM3 Program - Practice Picoblaze on Spartan-3A Starter Kit.
 000                       ;
 000                       ;
 000                       ;
 000                       ;
 000                       ; The 8 LEDs provide a simple 'heart beat' counter driven by interrupts generated at
 000                       ; one second intervals.
 000                       ;
 000                       ;
 000                       ;**************************************************************************************
 000                       ; Port definitions
 000                       ;**************************************************************************************
 000                       ;
 000                       ;
 000                       ;
 000                       CONSTANT LED_0, 40                  ;OUTPUT DATA PORT FOR SINGLE BLINKING LED
 000                       CONSTANT LED_PORT, 80               ;8 simple LEDs. Is an OUTPUT port.
 000                       CONSTANT AUDIO_1, 00                ;input data port. this is an INPUT port.
 000                       CONSTANT AUDIO_2, 01                ;input data port. this is an INPUT port.
 000                       CONSTANT AUDIO_3, 02                ;input data port. this is an INPUT port.
 000                       CONSTANT AUDIO_4, 04                ;input data port. this is an INPUT port.
 000                       ;**************************************************************************************
 000                       ; Special Register usage
 000                       ;**************************************************************************************
 000                       ;
 000                       ; No registers are given special names in this program.
 000                       ;
 000                       ;**************************************************************************************
 000                       ; Scratch Pad Memory Locations
 000                       ;**************************************************************************************
 000                       ;
 000                       ;
 000                       CONSTANT ISR_preserve_s0, 00        ;Preserve s0 contents during ISR
 000                       CONSTANT ISR_preserve_s1, 01        ;Preserve s1 contents during ISR
 000                       CONSTANT ISR_preserve_s2, 02        ;Preserve s2 contents during ISR
 000                       CONSTANT ISR_preserve_s3, 03        ;Preserve s3 contents during ISR
 000                       CONSTANT ISR_preserve_s4, 04        ;Preserve s3 contents during ISR
 000                       ;
 000                       CONSTANT SUM, 04                    ;SUM OF THE ADDRESSES
 000                       CONSTANT COUNT, 06                  ;COUNT UP TO 255
 000                       CONSTANT SUM_CARRY, 07              ;CARRY OF SUM USED TO OUTPUT LED
 000                       ;
 000                       ;**************************************************************************************
 000                       ; Useful data constants
 000                       ;**************************************************************************************
 000                       ;
 000                       ;
 000                       ; Constant to define a software delay of 1us. This must be adjusted to reflect the
 000                       ; clock applied to KCPSM3. Every instruction executes in 2 clock cycles making the
 000                       ; calculation highly predictable. The '6' in the following equation even allows for
 000                       ; 'CALL delay_1us' instruction in the initiating code.
 000                       ;
 000                       ; delay_1us_constant =  (clock_rate - 6)/4       Where 'clock_rate' is in MHz
 000                       ;
 000                       ; Example: For a 50MHz clock the constant value is (10-6)/4 = 11  (0B Hex).
 000                       ; For clock rates below 10MHz the value of 1 must be used and the operation will
 000                       ; become lower than intended. Interrupts may effect the timing of software based
 000                       ; delays.
 000                       ;
 000                       CONSTANT delay_1us_constant, 0B
 000                       ;
 000                       ;
 000                       ;
 000                       ; ASCII table
 000                       ;
 000                       CONSTANT character_a, 61
 000                       CONSTANT character_b, 62
 000                       CONSTANT character_c, 63
 000                       CONSTANT character_d, 64
 000                       CONSTANT character_e, 65
 000                       CONSTANT character_f, 66
 000                       CONSTANT character_g, 67
 000                       CONSTANT character_h, 68
 000                       CONSTANT character_i, 69
 000                       CONSTANT character_j, 6A
 000                       CONSTANT character_k, 6B
 000                       CONSTANT character_l, 6C
 000                       CONSTANT character_m, 6D
 000                       CONSTANT character_n, 6E
 000                       CONSTANT character_o, 6F
 000                       CONSTANT character_p, 70
 000                       CONSTANT character_q, 71
 000                       CONSTANT character_r, 72
 000                       CONSTANT character_s, 73
 000                       CONSTANT character_t, 74
 000                       CONSTANT character_u, 75
 000                       CONSTANT character_v, 76
 000                       CONSTANT character_w, 77
 000                       CONSTANT character_x, 78
 000                       CONSTANT character_y, 79
 000                       CONSTANT character_z, 7A
 000                       CONSTANT character_A, 41
 000                       CONSTANT character_B, 42
 000                       CONSTANT character_C, 43
 000                       CONSTANT character_D, 44
 000                       CONSTANT character_E, 45
 000                       CONSTANT character_F, 46
 000                       CONSTANT character_G, 47
 000                       CONSTANT character_H, 48
 000                       CONSTANT character_I, 49
 000                       CONSTANT character_J, 4A
 000                       CONSTANT character_K, 4B
 000                       CONSTANT character_L, 4C
 000                       CONSTANT character_M, 4D
 000                       CONSTANT character_N, 4E
 000                       CONSTANT character_O, 4F
 000                       CONSTANT character_P, 50
 000                       CONSTANT character_Q, 51
 000                       CONSTANT character_R, 52
 000                       CONSTANT character_S, 53
 000                       CONSTANT character_T, 54
 000                       CONSTANT character_U, 55
 000                       CONSTANT character_V, 56
 000                       CONSTANT character_W, 57
 000                       CONSTANT character_X, 58
 000                       CONSTANT character_Y, 59
 000                       CONSTANT character_Z, 5A
 000                       CONSTANT character_0, 30
 000                       CONSTANT character_1, 31
 000                       CONSTANT character_2, 32
 000                       CONSTANT character_3, 33
 000                       CONSTANT character_4, 34
 000                       CONSTANT character_5, 35
 000                       CONSTANT character_6, 36
 000                       CONSTANT character_7, 37
 000                       CONSTANT character_8, 38
 000                       CONSTANT character_9, 39
 000                       CONSTANT character_colon, 3A
 000                       CONSTANT character_stop, 2E
 000                       CONSTANT character_semi_colon, 3B
 000                       CONSTANT character_minus, 2D
 000                       CONSTANT character_divide, 2F       ;'/'
 000                       CONSTANT character_plus, 2B
 000                       CONSTANT character_comma, 2C
 000                       CONSTANT character_less_than, 3C
 000                       CONSTANT character_greater_than, 3E
 000                       CONSTANT character_equals, 3D
 000                       CONSTANT character_space, 20
 000                       CONSTANT character_CR, 0D           ;carriage return
 000                       CONSTANT character_question, 3F     ;'?'
 000                       CONSTANT character_dollar, 24
 000                       CONSTANT character_exclaim, 21      ;'!'
 000                       CONSTANT character_BS, 08           ;Back Space command character
 000                       ;
 000                       ;
 000                       ;
 000                       ;
 000                       ;
 000                       ;**************************************************************************************
 000                       ; Initialise the system
 000                       ;**************************************************************************************
 000                       ;
 000  00000    cold_start: LOAD s0, 00                         ;CLEAR ALL
 001  2E004                STORE s0, SUM[04]
 002  2E006                STORE s0, COUNT[06]
 003  2E007                STORE s0, SUM_CARRY[07]
 004  2C080                OUTPUT s0, LED_PORT[80]
 005  2C040                OUTPUT s0, LED_0[40]
 006                       ;
 006  3C001                ENABLE INTERRUPT
 007                       ;
 007                       ;**************************************************************************************
 007                       ; Main program
 007                       ;**************************************************************************************
 007                       ;
 007                       ; Display welcome message for design
 007                       ;
 007         main_program: 
 007  00101                LOAD s1, 01
 008  2C140                OUTPUT s1, LED_0[40]                ; PUTS 1 INTO LED_0 (TURNS ON LED)
 009  30021                CALL delay_1s[021]                  ;WAITS 1 SECOND TO TURN OFF
 00A  00100                LOAD s1, 00
 00B  2C140                OUTPUT s1, LED_0[40]                ; PUTS 0 INTO LED_0, (TURNS OFF LED)
 00C  30021                CALL delay_1s[021]                  ;WAITS ANOTEHR SECOND TO TURN ON
 00D  34007                JUMP main_program[007]
 00E                       ;**************************************************************************************
 00E                       ; Software delay routines
 00E                       ;**************************************************************************************
 00E                       ;
 00E                       ; Delay of 1us.
 00E                       ;
 00E                       ; Constant value 'delay_1us_constant' reflects the clock applied to KCPSM3. Every
 00E                       ; instruction executes in 2 clock cycles making the calculation highly predictable.
 00E                       ; The '6' in the following equation allows for the 'CALL delay_1us' instruction used
 00E                       ; in the initiating code. Interrupts may effect software derived delays.
 00E                       ;
 00E                       ; delay_1us_constant =  (clock_rate - 6)/4       Where 'clock_rate' is in MHz
 00E                       ;
 00E                       ; Registers used s0
 00E                       ;
 00E  0000B     delay_1us: LOAD s0, delay_1us_constant[0B]
 00F  1C001      wait_1us: SUB s0, 01
 010  3540F                JUMP NZ, wait_1us[00F]
 011  2A000                RETURN
 012                       ;
 012                       ; Delay of 40us.
 012                       ;
 012                       ; Registers used s0, s1
 012                       ;
 012  00128    delay_40us: LOAD s1, 28                         ;40 x 1us = 40us
 013  3000E     wait_40us: CALL delay_1us[00E]
 014  1C101                SUB s1, 01
 015  35413                JUMP NZ, wait_40us[013]
 016  2A000                RETURN
 017                       ;
 017                       ;
 017                       ; Delay of 1ms.
 017                       ;
 017                       ; Registers used s0, s1, s2
 017                       ;
 017  00219     delay_1ms: LOAD s2, 19                         ;25 x 40us = 1ms
 018  30012      wait_1ms: CALL delay_40us[012]
 019  1C201                SUB s2, 01
 01A  35418                JUMP NZ, wait_1ms[018]
 01B  2A000                RETURN
 01C                       ;
 01C                       ; Delay of 20ms.
 01C                       ;
 01C                       ; Delay of 20ms used during initialisation.
 01C                       ;
 01C                       ; Registers used s0, s1, s2, s3
 01C                       ;
 01C  00314    delay_20ms: LOAD s3, 14                         ;20 x 1ms = 20ms
 01D  30017     wait_20ms: CALL delay_1ms[017]
 01E  1C301                SUB s3, 01
 01F  3541D                JUMP NZ, wait_20ms[01D]
 020  2A000                RETURN
 021                       ;
 021                       ; Delay of approximately 1 second.
 021                       ;
 021                       ; Registers used s0, s1, s2, s3, s4
 021                       ;
 021  00432      delay_1s: LOAD s4, 32                         ;50 x 20ms = 1000ms
 022  3001C       wait_1s: CALL delay_20ms[01C]
 023  1C401                SUB s4, 01
 024  35422                JUMP NZ, wait_1s[022]
 025  2A000                RETURN
 026                       ;
 026                       ;**************************************************************************************
 026                       ; Interrupt Service Routine (ISR)
 026                       ;**************************************************************************************
 026                       ;
 026                       ; The interrupt is used purely to provide a 1 second heart beat binary counter pattern
 026                       ; on the 8 LEDs.
 026                       ;
 026  2E100           ISR: STORE s1, ISR_preserve_s0[00]       ;preserve register
 027  2E201                STORE s2, ISR_preserve_s1[01]
 028  2E302                STORE s3, ISR_preserve_s2[02]
 029  06104                FETCH s1, SUM[04]                   ;read current sum value
 02A  06207                FETCH s2, SUM_CARRY[07]             ;read carryout of the sums
 02B  06306                FETCH s3, COUNT[06]                 ;reads count
 02C                       ;;===================== ADD FIRST BYTE ================================
 02C  04500                INPUT s5, AUDIO_1[00]               ;INPUT INTO 1st BYTE
 02D  14580                COMPARE s5, 80                      ;COMPARES IT TO 1000_000 TO SEE IF ITS A NEGATIVE NUMBER
 02E  35831                JUMP C, ADD_BYTE_1[031]             ;jump if S2 < 80 (POSITIVE NUMBER)
 02F                       ;; CONVERSION FROM 2's COMPLEMENT IF NEGATIVE
 02F  0E5FF                XOR s5, FF
 030  18501                ADD s5, 01                          ;CONVERTING 2's COMPLEMENT
 031                       ;; ADDS THIS TO SUM
 031  19150    ADD_BYTE_1: ADD s1, s5                          ;ADD INPUT INTO REGISTER 1 (OUR SUM)
 032  1A200                ADDCY s2, 00                        ;ADD THE CARRYOUT TO OUR REGISTER 2
 033  18301                ADD s3, 01                          ;INCREMENT COUNTER
 034                       ;;===================== ADD SECOND BYTE ================================
 034  04501                INPUT s5, AUDIO_2[01]               ;INPUT INTO 1st BYTE
 035  14580                COMPARE s5, 80                      ;COMPARES IT TO 1000_000 TO SEE IF ITS A NEGATIVE NUMBER
 036  35839                JUMP C, ADD_BYTE_2[039]             ;jump if S2 < 80 (POSITIVE NUMBER)
 037                       ;; CONVERSION FROM 2's COMPLEMENT IF NEGATIVE
 037  0E5FF                XOR s5, FF
 038  18501                ADD s5, 01                          ;CONVERTING 2's COMPLEMENT
 039                       ;; ADDS THIS TO SUM
 039  19150    ADD_BYTE_2: ADD s1, s5                          ;ADD INPUT INTO REGISTER 1 (OUR SUM)
 03A  1A200                ADDCY s2, 00                        ;ADD THE CARRYOUT TO OUR REGISTER 2
 03B  18301                ADD s3, 01                          ;INCREMENT COUNTER
 03C                       ;;===================== ADD THIRD BYTE ================================
 03C  04502                INPUT s5, AUDIO_3[02]               ;INPUT INTO 1st BYTE
 03D  14580                COMPARE s5, 80                      ;COMPARES IT TO 1000_000 TO SEE IF ITS A NEGATIVE NUMBER
 03E  35841                JUMP C, ADD_BYTE_3[041]             ;jump if S2 < 80 (POSITIVE NUMBER)
 03F                       ;; CONVERSION FROM 2's COMPLEMENT IF NEGATIVE
 03F  0E5FF                XOR s5, FF
 040  18501                ADD s5, 01                          ;CONVERTING 2's COMPLEMENT
 041                       ;; ADDS THIS TO SUM
 041  19150    ADD_BYTE_3: ADD s1, s5                          ;ADD INPUT INTO REGISTER 1 (OUR SUM)
 042  1A200                ADDCY s2, 00                        ;ADD THE CARRYOUT TO OUR REGISTER 2
 043  18301                ADD s3, 01                          ;INCREMENT COUNTER
 044                       ;;===================== ADD FOURTH BYTE ================================
 044  04504                INPUT s5, AUDIO_4[04]               ;INPUT INTO 1st BYTE
 045  14580                COMPARE s5, 80                      ;COMPARES IT TO 1000_000 TO SEE IF ITS A NEGATIVE NUMBER
 046  35849                JUMP C, ADD_BYTE_4[049]             ;jump if S2 < 80 (POSITIVE NUMBER)
 047                       ;; CONVERSION FROM 2's COMPLEMENT IF NEGATIVE
 047  0E5FF                XOR s5, FF
 048  18501                ADD s5, 01                          ;CONVERTING 2's COMPLEMENT
 049                       ;; ADDS THIS TO SUM
 049  19150    ADD_BYTE_4: ADD s1, s5                          ;ADD INPUT INTO REGISTER 1 (OUR SUM)
 04A  1A200                ADDCY s2, 00                        ;ADD THE CARRYOUT TO OUR REGISTER 2
 04B  18301                ADD s3, 01                          ;INCREMENT COUNTER
 04C                       ;;============================================================
 04C  14300                COMPARE s3, 00                      ;IF COUNTER IS NOT 0 (OVER FLOW OF 255+1)
 04D  35473                JUMP NZ, return[073]                ;END INSTRUCTIOn
 04E  14280                COMPARE s2, 80                      ;IS IT BIGGER THAN 1000_0000?
 04F  35852                JUMP C, H40[052]                    ; IF ITS NOT JUMP TO H40 AND THEN COMPARE
 050  002FF                LOAD s2, FF                         ; LOAD WITH 1111_1111
 051  3406F                JUMP OUTPUT_LED[06F]                ; OUTPUTS IT INTO LED
 052  14240           H40: COMPARE s2, 40                      ;IS IT BIGGER THAN 100_0000?
 053  35856                JUMP C, H20[056]                    ; IF ITS NOT JUMP TO H20 AND THEN COMPARE
 054  002FE                LOAD s2, FE                         ; LOAD WITH 1111_1110
 055  3406F                JUMP OUTPUT_LED[06F]                ; OUTPUTS IT INTO LED
 056  14220           H20: COMPARE s2, 20                      ;IS IT BIGGER THAN 10_0000?
 057  3585A                JUMP C, H10[05A]                    ; IF ITS NOT JUMP TO H40 AND THEN COMPARE
 058  002FC                LOAD s2, FC                         ; LOAD WITH 1111_1100
 059  3406F                JUMP OUTPUT_LED[06F]                ; OUTPUTS IT INTO LED
 05A  14210           H10: COMPARE s2, 10                      ;IS IT BIGGER THAN 1_0000?
 05B  3585E                JUMP C, H08[05E]                    ; IF ITS NOT JUMP TO H40 AND THEN COMPARE
 05C  002F8                LOAD s2, F8                         ; LOAD WITH 1111_1000
 05D  3406F                JUMP OUTPUT_LED[06F]                ; OUTPUTS IT INTO LED
 05E  14208           H08: COMPARE s2, 08                      ;IS IT BIGGER THAN 1000?
 05F  35862                JUMP C, H04[062]                    ; IF ITS NOT JUMP TO H40 AND THEN COMPARE
 060  002F0                LOAD s2, F0                         ; LOAD WITH 1111_0000
 061  3406F                JUMP OUTPUT_LED[06F]                ; OUTPUTS IT INTO LED
 062  14204           H04: COMPARE s2, 04                      ;IS IT BIGGER THAN 100?
 063  35866                JUMP C, H02[066]                    ; IF ITS NOT JUMP TO H40 AND THEN COMPARE
 064  002E0                LOAD s2, E0                         ; LOAD WITH 1110_0000
 065  3406F                JUMP OUTPUT_LED[06F]                ; OUTPUTS IT INTO LED
 066  14202           H02: COMPARE s2, 02                      ;IS IT BIGGER THAN 10?
 067  3586A                JUMP C, H01[06A]                    ; IF ITS NOT JUMP TO H40 AND THEN COMPARE
 068  002C0                LOAD s2, C0                         ; LOAD WITH 1100_0000
 069  3406F                JUMP OUTPUT_LED[06F]                ; OUTPUTS IT INTO LED
 06A  14201           H01: COMPARE s2, 01                      ;IS IT BIGGER THAN 1?
 06B  3586E                JUMP C, H00[06E]                    ; IF ITS NOT JUMP TO H40 AND THEN COMPARE
 06C  00280                LOAD s2, 80                         ; LOAD WITH 1000_0000
 06D  3406F                JUMP OUTPUT_LED[06F]                ; OUTPUTS IT INTO LED
 06E  00200           H00: LOAD s2, 00                         ; LOAD WITH 0
 06F  2C280    OUTPUT_LED: OUTPUT s2, LED_PORT[80]             ;display counter value on LEDs
 070  00100                LOAD s1, 00                         ;RESET SUM
 071  00200                LOAD s2, 00                         ;RESET SUM_CARRY
 072  00300                LOAD s3, 00                         ;RESET COUNTER
 073  2E104        return: STORE s1, SUM[04]                   ;store new counter value
 074  2E207                STORE s2, SUM_CARRY[07]
 075  2E306                STORE s3, COUNT[06]                 ;STORE COUNTER VALUE
 076  06100                FETCH s1, ISR_preserve_s0[00]       ;restore registers
 077  06201                FETCH s2, ISR_preserve_s1[01]
 078  06302                FETCH s3, ISR_preserve_s2[02]
 079  38001                RETURNI ENABLE
 07A                       ;
 07A                       ;
 07A                       ;**************************************************************************************
 07A                       ; Interrupt Vector
 07A                       ;**************************************************************************************
 07A                       ;
 3FF                       ADDRESS 3FF
 3FF  34026                JUMP ISR[026]
 3FF                       ;
 3FF                       ;
